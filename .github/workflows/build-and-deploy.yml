name: Build and Deploy

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  build-and-deploy-test:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    environment: test
    if: github.event_name != 'workflow_dispatch'

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Login to ACR via OIDC
        run: az acr login --name ${{ vars.REGISTRY_NAME }}

      - name: Write .env.production
        run: echo '${{ toJSON(vars) }}' | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' >> .env.production

      - name: Build the Docker image
        run: |
          docker build -t ${{ vars.REGISTRY_NAME }}.azurecr.io/dddadelaidewebsite:${{ github.sha }} .

      - name: Push the Docker image to ACR
        run: |
          docker push ${{ vars.REGISTRY_NAME }}.azurecr.io/dddadelaidewebsite:${{ github.sha }}

      - name: Deploy Website Revision
        uses: azure/container-apps-deploy-action@v2
        with:
          location: AustraliaEast
          acrName: dddadelaide
          acrUsername: dddadelaide
          acrPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppName: ${{ vars.WEBSITE_NAME }}
          imageToDeploy: dddadelaide.azurecr.io/dddadelaidewebsite:${{ github.sha }}
          targetPort: 3000
          ingress: external
          disableTelemetry: true

  build-and-deploy-production:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch'

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Login to ACR via OIDC
        run: az acr login --name ${{ vars.REGISTRY_NAME }}

      - name: Write .env.production
        run: echo '${{ toJSON(vars) }}' | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' >> .env.production

      - name: Build the Docker image
        run: |
          docker build -t ${{ vars.REGISTRY_NAME }}.azurecr.io/dddadelaidewebsite:${{ github.sha }} .

      - name: Push the Docker image to ACR
        run: |
          docker push ${{ vars.REGISTRY_NAME }}.azurecr.io/dddadelaidewebsite:${{ github.sha }}

      - name: Deploy Website Revision
        uses: azure/container-apps-deploy-action@v2
        with:
          location: AustraliaEast
          acrName: dddadelaide
          acrUsername: dddadelaide
          acrPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppName: ${{ vars.WEBSITE_NAME }}
          imageToDeploy: dddadelaide.azurecr.io/dddadelaidewebsite:${{ github.sha }}
          targetPort: 3000
          ingress: external
          disableTelemetry: true